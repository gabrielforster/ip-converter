{"version":3,"sources":["Components/ErrorMessage.tsx","Components/IPInfos.tsx","Components/GetIP.tsx","App.tsx","index.tsx"],"names":["ErrorMessage","react","className","IPInfos","require","Netmask","_ref","first","second","third","fourth","mask","ipBar","broadcast","firstIP","lastIP","ipToBin","number","finalBinIp","toString","length","GetIP","_React$useState","React","_React$useState2","Object","slicedToArray","setFirst","_React$useState3","_React$useState4","setSecond","_React$useState5","_React$useState6","setThird","_React$useState7","_React$useState8","setFourth","_React$useState9","_React$useState10","showResults","setShowResults","_React$useState11","_React$useState12","setIPBar","_React$useState13","_React$useState14","setMask","_React$useState15","_React$useState16","setBroadcast","_React$useState17","_React$useState18","setfirstIP","_React$useState19","_React$useState20","setlastIP","values","checkValues","NaN","type","value","max","onChange","target","parseInt","_ref2","_ref3","_ref4","_ref5","onClick","bitMask","ip","join","last","getMask","IPInfos_IPInfos","ErrorMessage_ErrorMessage","App","react_default","a","createElement","GetIP_GetIP","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.3715db6a.chunk.js","sourcesContent":["import * as React from 'react'\n\nexport const ErrorMessage= () => {\n    return(\n        <div className='results'>\n            <h1 className='texts'>Os valores de IP informados são inválidos</h1>\n        </div>\n    )\n}\n","import * as React from 'react'\nconst Netmask = require('netmask').Netmask\n\ninterface Infos{\n  first: number,\n  second: number,\n  third: number,\n  fourth: number,\n  ipBar: number,\n  mask: string,\n  broadcast: string,\n  lastIP: string,\n  firstIP: string,\n}\n\nexport const IPInfos: React.FC<Infos> = ({first, second, third, fourth, ipBar, mask, broadcast, firstIP, lastIP}) => {\n  \n  const ipToBin = (number:number) => {\n    let finalBinIp:string = number.toString(2)\n    while(finalBinIp.length<8){\n      finalBinIp = '0' + finalBinIp\n    }\n    return (finalBinIp)\n  }\n  \n  const ipClass = () => {\n    if(first < 128) return 'A'\n    else if(first < 192) return 'B'\n    else if(first < 224) return 'C'\n    else if(first < 240) return 'D'\n    else return 'E' \n  }\n\n  return (\n    <>\n    <div className=\"infos\">\n      <div className=\"mask\">\n        {mask !== ''\n        ?\n        <>\n          <h2 className=\"texts\">IP em valores <strong>binários</strong></h2>\n          <p className='values bin-ip'>{ipToBin(first)}.{ipToBin(second)}.{ipToBin(third)}.{ipToBin(fourth)}</p>\n\n          <h2 className='texts'><strong>Classe</strong> do IP</h2>\n          <p className='values'>{ipClass()}</p>\n          \n          <h2 className='texts'><strong>Máscara</strong> da rede</h2>\n          <p className='values'>{mask}</p>\n          \n          <h2 className='texts'>Endereço de <strong>Broadcast</strong> da rede</h2>\n          <p className='values'>{broadcast}</p>\n          \n          <h2 className='texts'><strong>Primeiro</strong> IP da rede</h2>\n          <p className='values'>{firstIP}</p>\n          \n          <h2 className='texts'><strong>Último</strong> IP da rede</h2>\n          <p className='values'>{lastIP}</p>\n\n        </>\n        :\n        null\n        }\n      </div>\n    </div>\n\n    \n    </>\n  )\n}\n","import * as React from 'react'\nimport { ErrorMessage } from './ErrorMessage'\nimport { IPInfos } from './IPInfos'\nimport '../assets/styles/App.css'\n\nexport const GetIP = () => {\n\n  const [first, setFirst] = React.useState(0)\n  const [second, setSecond] = React.useState(0)\n  const [third, setThird] = React.useState(0)\n  const [fourth, setFourth] = React.useState(0)\n  const [showResults, setShowResults] = React.useState(false)\n  const [ipBar, setIPBar] = React.useState(0)\n  const [mask, setMask] = React.useState('')\n  const [broadcast, setBroadcast] = React.useState('')\n  const [firstIP, setfirstIP] = React.useState('')\n  const [lastIP, setlastIP] = React.useState('')\n  const values = first + second + third + fourth\n\n  const checkValues = () =>{\n    if((first < 256 && first > 0 && first !== NaN) &&\n     (second < 256 && second !== NaN) &&\n      (third < 256 && third !== NaN) &&\n       (fourth < 256 && fourth !== NaN) &&\n        (ipBar < 33)&&\n        values > 0)\n      { return true }\n    else return false\n  }\n\n  const handleValues = () => {\n    if (checkValues() === true){ \n      return (<IPInfos \n        first={first}\n        second={second}\n        third={third}\n        fourth={fourth}\n        ipBar={ipBar}\n        mask={mask}\n        broadcast={broadcast}\n        firstIP={firstIP}\n        lastIP={lastIP}\n        />) \n      }\n      \n    else return(<ErrorMessage/>) \n  }\n\n  const getMask = (bitMask:number) => {\n    if(checkValues() === true){\n    const Netmask = require('netmask').Netmask\n    let ip = new Netmask([first, '.', second,'.', third, '.', fourth,'/',bitMask].join(''));\n    \n    setMask(ip.mask)\n    setBroadcast(ip.broadcast)\n    setfirstIP(ip.first)\n    setlastIP(ip.last)\n    }\n  }\n\n  return (\n    <main>\n      <div className='container'>\n        <h1 className='texts'>Seu IP em valores <strong>decimais</strong> e o barramento:</h1>\n        <div className=\"getip\">\n          <input type=\"number\" value={first} max={255} onChange={({target})=>{\n            setFirst(parseInt(target.value)) \n            setShowResults(false)\n            }}/>\n          <input type=\"number\" value={second} max={255} onChange={({target})=>{\n            setSecond(parseInt(target.value))\n            setShowResults(false)\n            }}/>\n          <input type=\"number\" value={third} max={255} onChange={({target})=>{\n            setThird(parseInt(target.value))\n            setShowResults(false)\n            }}/>\n          <input type=\"number\" value={fourth} max={255} onChange={({target})=>{\n            setFourth(parseInt(target.value))\n            setShowResults(false)\n            }}/>\n        </div>\n        <div className=\"get-bitmask\">\n          <h2 className='texts'>/</h2>\n          <input type=\"number\" value={ipBar} max={32} onChange={({target})=>{\n            setIPBar(parseInt(target.value))\n            setShowResults(false)\n            }}/>\n        </div>\n\n        <div className=\"convert-btn\">\n          <button className='to-convert-btn' onClick={() => {\n            setShowResults(true)\n            getMask(ipBar)\n            }}>Gerar Resultados</button>\n        </div>\n        {\n          (showResults != false) \n          ?\n          <div>\n            {handleValues()}\n          </div>\n          :\n          null\n        }\n        \n      </div>\n    </main>\n  )\n}\n","import React from 'react';\nimport './assets/styles/App.css';\nimport {GetIP} from './Components/GetIP'\n\nfunction App () {\n  return (\n    <div className=\"app\">\n        <GetIP />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}