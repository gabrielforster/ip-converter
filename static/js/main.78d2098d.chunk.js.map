{"version":3,"sources":["Components/ErrorMessage.tsx","Components/IPInfos.tsx","Components/GetIP.tsx","App.tsx","index.tsx"],"names":["ErrorMessage","react","className","IPInfos","_ref","first","second","third","fourth","mask","broadcast","firstIP","lastIP","ipToBin","number","finalBinIp","toString","length","GetIP","_useState","useState","_useState2","Object","slicedToArray","setFirst","_useState3","_useState4","setSecond","_useState5","_useState6","setThird","_useState7","_useState8","setFourth","_useState9","_useState10","showResults","setShowResults","_useState11","_useState12","ipBar","setIPBar","_useState13","_useState14","setMask","_useState15","_useState16","setBroadcast","_useState17","_useState18","setfirstIP","_useState19","_useState20","setlastIP","values","checkValues","NaN","react_default","a","createElement","type","value","onChange","target","parseInt","_ref2","_ref3","_ref4","_ref5","onClick","bitMask","ip","Netmask","require","join","last","getMask","IPInfos_IPInfos","ErrorMessage_ErrorMessage","App","GetIP_GetIP","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.78d2098d.chunk.js","sourcesContent":["import * as React from 'react'\n\nexport const ErrorMessage= () => {\n    return(\n        <div className='results'>\n            <h1 className='texts'>Os valores de IP informados são inválidos</h1>\n        </div>\n    )\n}\n","import * as React from \"react\";\nimport { Infos } from \"./GetIP\";\n\nexport const IPInfos: React.FC<Infos> = ({\n  first,\n  second,\n  third,\n  fourth,\n  mask,\n  broadcast,\n  firstIP,\n  lastIP,\n}) => {\n  const ipToBin = (number: number) => {\n    let finalBinIp: string = number.toString(2);\n    while (finalBinIp.length < 8) {\n      finalBinIp = \"0\" + finalBinIp;\n    }\n    return finalBinIp;\n  };\n\n  const ipClass = () => {\n    if (first < 128) return \"A\";\n    else if (first < 192) return \"B\";\n    else if (first < 224) return \"C\";\n    else if (first < 240) return \"D\";\n    else return \"E\";\n  };\n\n  return (\n    <>\n      <div className='infos'>\n        <div className='mask'>\n          {mask !== \"\" ? (\n            <>\n              <h2 className='texts'>\n                IP em valores <strong>binários</strong>\n              </h2>\n              <p className='values bin-ip'>\n                {ipToBin(first)}.{ipToBin(second)}.{ipToBin(third)}.\n                {ipToBin(fourth)}\n              </p>\n\n              <h2 className='texts'>\n                <strong>Classe</strong> do IP\n              </h2>\n              <p className='values'>{ipClass()}</p>\n\n              <h2 className='texts'>\n                <strong>Máscara</strong> da rede\n              </h2>\n              <p className='values'>{mask}</p>\n\n              <h2 className='texts'>\n                Endereço de <strong>Broadcast</strong> da rede\n              </h2>\n              <p className='values'>{broadcast}</p>\n\n              <h2 className='texts'>\n                <strong>Primeiro</strong> IP da rede\n              </h2>\n              <p className='values'>{firstIP}</p>\n\n              <h2 className='texts'>\n                <strong>Último</strong> IP da rede\n              </h2>\n              <p className='values'>{lastIP}</p>\n            </>\n          ) : null}\n        </div>\n      </div>\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport { ErrorMessage } from \"./ErrorMessage\";\nimport { IPInfos } from \"./IPInfos\";\nimport \"../assets/styles/App.css\";\n\nexport interface Infos {\n  first: number;\n  second: number;\n  third: number;\n  fourth: number;\n  mask: string;\n  broadcast: string;\n  lastIP: string;\n  firstIP: string;\n}\n\nexport const GetIP: React.FC<Infos> = () => {\n  const [first, setFirst] = useState(0);\n  const [second, setSecond] = useState(0);\n  const [third, setThird] = useState(0);\n  const [fourth, setFourth] = useState(0);\n  const [showResults, setShowResults] = useState(false);\n  const [ipBar, setIPBar] = useState(0);\n  const [mask, setMask] = useState(\"\");\n  const [broadcast, setBroadcast] = useState(\"\");\n  const [firstIP, setfirstIP] = useState(\"\");\n  const [lastIP, setlastIP] = useState(\"\");\n  const values = first + second + third + fourth;\n\n  const checkValues = () => {\n    if (\n      first < 256 &&\n      first > 0 &&\n      first !== NaN &&\n      second < 256 &&\n      second !== NaN &&\n      third < 256 &&\n      third !== NaN &&\n      fourth < 256 &&\n      fourth !== NaN &&\n      ipBar < 33 &&\n      values > 0\n    ) {\n      return true;\n    } else return false;\n  };\n\n  const handleValues = () => {\n    if (checkValues() === true) {\n      return (\n        <IPInfos\n          first={first}\n          second={second}\n          third={third}\n          fourth={fourth}\n          mask={mask}\n          broadcast={broadcast}\n          firstIP={firstIP}\n          lastIP={lastIP}\n        />\n      );\n    } else return <ErrorMessage />;\n  };\n\n  const getMask = (bitMask: number) => {\n    if (checkValues() === true) {\n      const Netmask = require(\"netmask\").Netmask;\n      let ip = new Netmask(\n        [first, \".\", second, \".\", third, \".\", fourth, \"/\", bitMask].join(\"\")\n      );\n\n      setMask(ip.mask);\n      setBroadcast(ip.broadcast);\n      setfirstIP(ip.first);\n      setlastIP(ip.last);\n    }\n  };\n\n  return (\n    <main>\n      <div className='container'>\n        <h1 className='texts'>\n          Seu IP em valores <strong>decimais</strong> e o barramento:\n        </h1>\n        <div className='getip'>\n          <input\n            type='number'\n            value={first}\n            onChange={({ target }) => {\n              setFirst(parseInt(target.value));\n              setShowResults(false);\n            }}\n          />\n          <input\n            type='number'\n            value={second}\n            onChange={({ target }) => {\n              setSecond(parseInt(target.value));\n              setShowResults(false);\n            }}\n          />\n          <input\n            type='number'\n            value={third}\n            onChange={({ target }) => {\n              setThird(parseInt(target.value));\n              setShowResults(false);\n            }}\n          />\n          <input\n            type='number'\n            value={fourth}\n            onChange={({ target }) => {\n              setFourth(parseInt(target.value));\n              setShowResults(false);\n            }}\n          />\n        </div>\n        <div className='get-bitmask'>\n          <h2 className='texts'>/</h2>\n          <input\n            type='number'\n            value={ipBar}\n            onChange={({ target }) => {\n              setIPBar(parseInt(target.value));\n              setShowResults(false);\n            }}\n          />\n        </div>\n\n        <div className='convert-btn'>\n          <button\n            className='to-convert-btn'\n            onClick={() => {\n              setShowResults(true);\n              getMask(ipBar);\n            }}\n          >\n            Gerar Resultados\n          </button>\n        </div>\n        {showResults == true ? <div>{handleValues()}</div> : null}\n      </div>\n    </main>\n  );\n};\n","import React from \"react\";\nimport \"./assets/styles/App.css\";\nimport { GetIP } from \"./Components/GetIP\";\n\nfunction App() {\n  return (\n    <div className='app'>\n      <GetIP\n        first={0}\n        second={0}\n        third={0}\n        fourth={0}\n        mask={\"\"}\n        broadcast={\"\"}\n        lastIP={\"\"}\n        firstIP={\"\"}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}